buildscript {
  	repositories {
    	mavenLocal()
    	mavenCentral()
    	jcenter()
    	maven { url "http://repo.spring.io/milestone/"}
  	}

  	dependencies {
    	classpath 'org.github.mansur.scalastyle:gradle-scalastyle-plugin_2.10:0.4.1'
  	}

}

plugins {
    id 'net.researchgate.release' version '2.5.0'
    id 'nebula.rpm' version '4.3.0'
    id "com.github.maiflai.scalatest" version "0.18"
}

allprojects {
    apply plugin: 'scala'
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'maven'
    apply plugin: 'jacoco'
    apply plugin: 'scalaStyle'

    group 'com.justo.mutant.scala'
    
    repositories {
    	mavenLocal()
    	mavenCentral()
    	jcenter()
    	maven { url "http://repo.spring.io/milestone/"}
  	}
    
    dependencies {
		zinc group: 'com.typesafe.zinc', name: 'zinc', version: '0.3.15'
		compile "org.scala-lang:scala-compiler:${scalaCompiler}"	
		compile "org.scala-lang:scala-library:${scalaCompiler}"
		compile group: 'org.scalactic', name: 'scalactic_2.11', version: '3.2.0-SNAP7'
		compile group: 'org.scala-lang.modules', name: 'scala-xml_2.11', version: '1.0.6'
		testCompile group: 'org.scalatest', name: 'scalatest_2.11', version: '3.2.0-SNAP7'
		testCompile group: 'org.pegdown', name: 'pegdown', version: '1.6.0'
    }

    task setCompiler {
        compileJava.options.compilerArgs << '-parameters'
    }
    
    jacoco {
        toolVersion = '0.7.6.201602180812'
	}

    compileJava.dependsOn setCompiler
    test.dependsOn scalaStyle
    jacocoTestReport.dependsOn test

}

subprojects {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    compileJava.options.encoding = 'UTF-8'
    defaultTasks = ['clean', 'build']

    project.ext.environment = System.getProperty("env", "dev")

    configurations.all {
        exclude group: 'log4j'
        exclude group: 'org.apache.tomcat.embed'

        resolutionStrategy.cacheChangingModulesFor 600, 'seconds'
    }
    
    configurations.zinc {
		resolutionStrategy.force "org.scala-lang:scala-library:${scalaCompiler}"    	
    }
    
    task findbugsAll {
    	dependsOn jacocoTestReport
        dependsOn tasks.withType(FindBugs)
    }
}

/******************************************************************************
 * GRADLE WRAPPER CONTROL                                                     *
 ******************************************************************************/
task wrapper(type: Wrapper) {
    gradleVersion = '4.4'
}

/******************************************************************************
 * JACOCO CODE COVERAGE                                                       *
 ******************************************************************************/
jacocoTestReport {
    reports {
        html {
            enabled true
        }
        
        xml {
        	enabled true
        }
    }
}

test.finalizedBy(project.tasks.jacocoTestReport)

/******************************************************************************
 * SCALA CONFIGURATIONS                                                       *
 ******************************************************************************/
ScalaCompileOptions.metaClass.daemonServer = true
ScalaCompileOptions.metaClass.fork = true
ScalaCompileOptions.metaClass.useAnt = false
ScalaCompileOptions.metaClass.useCompileDaemon = false

tasks.withType(ScalaCompile) {
    configure(scalaCompileOptions.forkOptions) {
        memoryMaximumSize = '1g'
        jvmArgs = ['-XX:MaxPermSize=512m']
    }
    
    scalaCompileOptions.with {
        force = false
    }
}

task spec(dependsOn: ['testClasses'], type: JavaExec) {
  	main = 'org.scalatest.tools.Runner'
  	args = ['-R', 'build/classes/test', '-o']
  	classpath = sourceSets.test.runtimeClasspath
}

scalaStyle {
  	configLocation = "../config/scala-style-config.xml"
  	includeTestSourceDirectory = true
  	source = "src/main/scala"
  	testSource = "src/test/scala"
}
